#!/usr/bin/env python3
"""
Legacy Bangla Font to Unicode Converter
‡¶è‡¶á ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü legacy Bangla fonts (‡¶Ø‡ßá‡¶Æ‡¶® SutonnyMJ) ‡¶•‡ßá‡¶ï‡ßá standard Unicode Bangla ‡¶§‡ßá convert ‡¶ï‡¶∞‡ßá
"""

import re

# Legacy font to Unicode mapping (common SutonnyMJ mappings)
LEGACY_TO_UNICODE = {
    # Vowels and basic characters
    'A': '‡¶Ö', 'Av': '‡¶Ü', 'B': '‡¶á', 'C': '‡¶â', 'D': '‡¶ä', 'E': '‡¶è', 'F': '‡¶ê', 
    'G': '‡¶ì', 'H': '‡¶î', 'I': '‡ßÉ', 'J': '‡ßó', 'K': '‡¶ï', 'L': '‡¶ñ', 'M': '‡¶ó',
    'N': '‡¶ò', 'O': '‡¶ô', 'P': '‡¶ö', 'Q': '‡¶õ', 'R': '‡¶ú', 'S': '‡¶ù', 'T': '‡¶û',
    'U': '‡¶ü', 'V': '‡¶†', 'W': '‡¶°', 'X': '‡¶¢', 'Y': '‡¶£', 'Z': '‡¶§', '_': '‡¶•',
    '`': '‡¶¶', 'a': '‡¶ß', 'b': '‡¶®', 'c': '‡¶™', 'd': '‡¶´', 'e': '‡¶¨', 'f': '‡¶≠',
    'g': '‡¶Æ', 'h': '‡¶Ø', 'i': '‡¶∞', 'j': '‡¶≤', 'k': '‡¶∂', 'l': '‡¶∑', 'm': '‡¶∏',
    'n': '‡¶π', 'o': '‡¶°‡¶º', 'p': '‡¶¢‡¶º', 'q': '‡¶Ø‡¶º', 'r': '‡ßé', 's': '‡¶Ç', 't': '‡¶É',
    'u': '‡¶Å', 'v': '‡¶æ', 'w': '‡¶ø', 'x': '‡ßÄ', 'y': '‡ßÅ', 'z': '‡ßÇ',
    
    # Common combinations
    'Av': '‡¶Ü', 'Bw': '‡¶á', 'Kv': '‡¶ï‡¶æ', 'Kb': '‡¶ï‡¶®', 'Ki': '‡¶ï‡¶∞', 'Kw': '‡¶ï‡¶ø',
    'Ky': '‡¶ï‡ßÅ', 'K‚Ä°': '‡¶ï‡ßá', 'Ko': '‡¶ï‡ßã', 'K¬©': '‡¶ï‡¶∞‡ßç', 'Kz': '‡¶ï‡ßÅ', 'Kx': '‡¶ï‡ßÄ',
    'gb': '‡¶Æ‡¶®', 'gv': '‡¶Æ‡¶æ', 'gi': '‡¶Æ‡¶∞', 'gy': '‡¶Æ‡ßÅ', 'g‚Ä°': '‡¶Æ‡ßá', 'go': '‡¶Æ‡ßã',
    'bv': '‡¶®‡¶æ', 'wb': '‡¶®', 'wU': '‡¶§‡¶ø', 'wZ': '‡¶§‡¶ø', 'wK': '‡¶ï‡¶ø', 'wQ': '‡¶õ‡¶ø',
    'wM': '‡¶ó‡¶ø', 'wj': '‡¶≤‡¶ø', 'wn': '‡¶π‡¶ø', 'we': '‡¶¨‡¶ø', 'wk': '‡¶∂‡¶ø', 'wr': '‡¶∞‡¶ø',
    'ev': '‡¶¨‡¶æ', 'eb': '‡¶¨‡¶®', 'ei': '‡¶¨‡¶∞', 'ey': '‡¶¨‡ßÅ', 'e‚Ä°': '‡¶¨‡ßá', 'eo': '‡¶¨‡ßã',
    'Rv': '‡¶ú‡¶æ', 'Rb': '‡¶ú‡¶®', 'Ri': '‡¶ú‡¶∞', 'Ry': '‡¶ú‡ßÅ', 'R‚Ä°': '‡¶ú‡ßá', 'Ro': '‡¶ú‡ßã',
    'Zv': '‡¶§‡¶æ', 'Zb': '‡¶§‡¶®', 'Zi': '‡¶§‡¶∞', 'Zy': '‡¶§‡ßÅ', 'Z‚Ä°': '‡¶§‡ßá', 'Zo': '‡¶§‡ßã',
    'Pv': '‡¶ö‡¶æ', 'Pb': '‡¶ö‡¶®', 'Pi': '‡¶ö‡¶∞', 'Py': '‡¶ö‡ßÅ', 'P‚Ä°': '‡¶ö‡ßá', 'Po': '‡¶ö‡ßã',
    'nv': '‡¶π‡¶æ', 'nb': '‡¶π‡¶®', 'ni': '‡¶π‡¶∞', 'ny': '‡¶π‡ßÅ', 'n‚Ä°': '‡¶π‡ßá', 'no': '‡¶π‡ßã',
    'mv': '‡¶∏‡¶æ', 'mb': '‡¶∏‡¶®', 'mi': '‡¶∏‡¶∞', 'my': '‡¶∏‡ßÅ', 'm‚Ä°': '‡¶∏‡ßá', 'mo': '‡¶∏‡ßã',
    'jv': '‡¶≤‡¶æ', 'jb': '‡¶≤‡¶®', 'ji': '‡¶≤‡¶∞', 'jy': '‡¶≤‡ßÅ', 'j‚Ä°': '‡¶≤‡ßá', 'jo': '‡¶≤‡ßã',
    'dv': '‡¶´‡¶æ', 'db': '‡¶´‡¶®', 'di': '‡¶´‡¶∞', 'dy': '‡¶´‡ßÅ', 'd‚Ä°': '‡¶´‡ßá', 'do': '‡¶´‡ßã',
    
    # Special characters and conjuncts
    '¬©': '‡¶∞‡ßç', '¬Ø': '‡¶∏‡ßç', '¬≤': '‡¶§‡ßç', '¬≥': '‡¶®‡ßç', '¬∂': '‡¶¨‡ßç', '√ç': '‡¶§‡¶ø', '≈°': '‡¶®‡ßç‡¶§',
    '‚Ä°': '‡ßá', "'": '‡ßÅ', '"': '‡ßÇ', '"': '‡ßÉ', '‚Äì': '‡¶æ', '‚Äî': '‡¶ø', '‚Ä¢': '‡ßÄ',
    
    # Numbers
    '0': '‡ß¶', '1': '‡ßß', '2': '‡ß®', '3': '‡ß©', '4': '‡ß™', 
    '5': '‡ß´', '6': '‡ß¨', '7': '‡ß≠', '8': '‡ßÆ', '9': '‡ßØ',
    
    # Punctuation
    '|': '‡•§', '√≥': '‡¶∞‡ßç', '‚Äû': '‡¶ï‡ßç‡¶∑', '‚Ä¶': '‡¶ú‡ßç‡¶û'
}

def convert_legacy_to_unicode(text):
    """Convert legacy Bangla font text to Unicode Bangla"""
    
    # Sort by length (longer patterns first) to avoid partial replacements
    sorted_mappings = sorted(LEGACY_TO_UNICODE.items(), key=lambda x: len(x[0]), reverse=True)
    
    # Apply conversions
    converted_text = text
    for legacy, unicode_char in sorted_mappings:
        converted_text = converted_text.replace(legacy, unicode_char)
    
    return converted_text

def analyze_text_sample(text, max_lines=20):
    """Analyze and show conversion results"""
    lines = text.split('\n')
    
    print("üîç Legacy Font to Unicode Conversion Analysis")
    print("=" * 60)
    
    for i, line in enumerate(lines[:max_lines], 1):
        if line.strip():
            original = line.strip()
            converted = convert_legacy_to_unicode(original)
            
            print(f"\nLine {i}:")
            print(f"Original:  {original}")
            print(f"Converted: {converted}")
            
            if original != converted:
                print("‚úÖ Conversion applied")
            else:
                print("‚ö™ No conversion needed")

def convert_full_text(input_file, output_file=None):
    """Convert entire text file"""
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            text = f.read()
        
        print(f"üìÑ Reading {input_file}...")
        print(f"Original text length: {len(text):,} characters")
        
        # Convert text
        converted_text = convert_legacy_to_unicode(text)
        print(f"Converted text length: {len(converted_text):,} characters")
        
        # Save converted text
        if not output_file:
            output_file = input_file.replace('.txt', '_unicode.txt')
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(converted_text)
        
        print(f"üíæ Saved converted text to: {output_file}")
        
        # Show sample
        print(f"\nüìñ Sample conversion:")
        analyze_text_sample(text, max_lines=5)
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

if __name__ == "__main__":
    import os
    
    # Test with sample text
    sample_text = """kvw≈°√ç mvsevw`KZvi PP¬©v: cwi‚Ä°c√ñw¬∂Z Kvk¬•xi Bmy¬®
‚Ä†ivev‚Ä°qZ ‚Ä†di‚Ä°`≈†m*
Zb¬•q mvnv Rq**
gyL¬®k√£: kvw≈°√ç mvsevw`KZv, Kvk¬•xi, MYgva¬®g, hy√ógyLxbZv
1. f~wgKv
Kvk¬•xi fviZxq Dcgnv‚Ä°`‚Ä°ki GKwU ¬∏i√¶Z¬°c~Y¬© A√Çj"""
    
    print("üß™ Testing conversion with sample text:")
    analyze_text_sample(sample_text)
    
    # Convert the extracted PDF text
    pdf_file = "extracted_text_002.txt"
    if os.path.exists(pdf_file):
        print(f"\nüîÑ Converting {pdf_file}...")
        converted_file = convert_full_text(pdf_file)
        
        if converted_file:
            print(f"\n‚úÖ Conversion completed!")
            print(f"üìÅ Files:")
            print(f"   Original: {pdf_file}")
            print(f"   Converted: {converted_file}")
    else:
        print(f"‚ùå File not found: {pdf_file}")